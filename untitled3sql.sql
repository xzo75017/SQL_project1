SELECT * FROM NON_FUNCTIONAL_LOCATIONS;
SELECT * FROM DEPARTMENTS;
SELECT * FROM JOBS;
SELECT * FROM EMPLOYEES;
SELECT * FROM JOB_HISTORY;
SELECT * FROM REGIONS;
SELECT * FROM COUNTRIES; 


/************************** 3. Aggregate Function: Min, Max, Count, Sum, Avg **************************/

--Find max salary of an employee.
SELECT MAX(SALARY) AS MAX_SALARY FROM EMPLOYEES;

--List down the employees who are getting maximum salary.
SELECT * FROM EMPLOYEES
WHERE SALARY = (SELECT MAX(SALARY) AS MAX_SALARY FROM EMPLOYEES);


--Find min salary of an employee.
SELECT MIN(SALARY) AS MIN_SALARY FROM EMPLOYEES;

--List down the employees who are getting lowest salary.
SELECT * FROM EMPLOYEES
WHERE SALARY = (SELECT MIN(SALARY) AS MAX_SALARY FROM EMPLOYEES);


--Find total salary given to employees.
SELECT SUM(SALARY) AS SUM_OF_SALARY FROM EMPLOYEES;


--Find average salary of employees.
SELECT ROUND(AVG(SALARY), 2) AS SUM_OF_SALARY FROM EMPLOYEES;

--List down the employees who are getting more then average salary.
SELECT * FROM EMPLOYEES
WHERE SALARY > (SELECT ROUND(AVG(SALARY), 2) AS SUM_OF_SALARY FROM EMPLOYEES)
ORDER BY SALARY;

--Find total number of employees.
SELECT COUNT(*) FROM EMPLOYEES;


--Combine the aggregated results in a single row
SELECT MAX(TOTAL_NUMBER_OF_EMPLOYEES) AS TOTAL_NUMBER_OF_EMPLOYEES,
  MAX(SUM_OF_SALARIES)      AS SUM_OF_SALARIES,
  MAX(MAX_SALARY_OF_IT)          AS MAX_SALARY_OF_IT,
  MAX(NUMBER_OF_EMP_IN_IT)       AS NUMBER_OF_EMP_IN_IT,
  MAX(MIN_SALARY_OF_FINANCE)     AS MIN_SALARY_OF_FINANCE,
  MAX(NUMBER_OF_EMP_IN_FINANCE)  AS NUMBER_OF_EMP_IN_FINANCE,
  MAX(AVERAGE_SALARY_OF_HR)      AS AVERAGE_SALARY_OF_HR,
  MAX(NUMBER_OF_EMP_IN_HR)       AS NUMBER_OF_EMP_IN_HR
FROM
  (
   SELECT SUM(SALARY) AS "SUM_OF_SALARIES",
    NULL              AS TOTAL_NUMBER_OF_EMPLOYEES,
    NULL              AS MAX_SALARY_OF_IT,
    NULL              AS NUMBER_OF_EMP_IN_IT,
    NULL              AS MIN_SALARY_OF_FINANCE,
    NULL              AS NUMBER_OF_EMP_IN_FINANCE,
    NULL              AS AVERAGE_SALARY_OF_HR,
    NULL              AS NUMBER_OF_EMP_IN_HR
  FROM EMPLOYEES
  UNION ALL
  SELECT NULL,
    COUNT(*) AS "TOTAL_NUMBER_OF_EMPLOYEES",
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL
  FROM EMPLOYEES
  UNION ALL
  SELECT NULL,
    NULL,
    MAX(SALARY) AS "MAX_SALARY_OF_IT",
    COUNT(*)    AS "NUMBER_OF_EMP_IN_IT",
    NULL,
    NULL,
    NULL,
    NULL
  FROM EMPLOYEES
  WHERE DEPARTMENT_ID =
    (SELECT DEPARTMENT_ID FROM DEPARTMENTS WHERE DEPARTMENT_NAME = 'IT'
    )
  AND HIRE_DATE > TO_DATE('29/11/1990', 'dd/MM/yyyy')
  UNION ALL
  SELECT NULL,
    NULL,
    NULL,
    NULL,
    MIN(SALARY) AS "MIN_SALARY_OF_FINANCE",
    COUNT(*)    AS "NUMBER_OF_EMP_IN_FINANCE",
    NULL,
    NULL
  FROM EMPLOYEES
  WHERE DEPARTMENT_ID =
    (SELECT DEPARTMENT_ID FROM DEPARTMENTS WHERE DEPARTMENT_NAME = 'Finance'
    )
  AND HIRE_DATE > TO_DATE('29/01/1987', 'dd/MM/yyyy')
  UNION ALL
  SELECT NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    ROUND(AVG(SALARY),2) AS "AVERAGE_SALARY_OF_HR",
    COUNT(*)             AS "NUMBER_OF_EMP_IN_HR"
  FROM EMPLOYEES
  WHERE DEPARTMENT_ID =
    (SELECT DEPARTMENT_ID
    FROM DEPARTMENTS
    WHERE DEPARTMENT_NAME = 'Human Resources'
    )
  ) T;
   

   

--Combine the aggregated results in multiple rows
SELECT MAX(MIN_SALARY_OF_FINANCE), MAX(NUMBER_OF_EMP_IN_FINANCE), MAX(AVERAGE_SALARY_OF_HR), MAX(NUMBER_OF_EMP_IN_HR) FROM(
SELECT  MIN(SALARY) AS "MIN_SALARY_OF_FINANCE", COUNT(*) AS "NUMBER_OF_EMP_IN_FINANCE", NULL AS AVERAGE_SALARY_OF_HR, NULL AS NUMBER_OF_EMP_IN_HR
FROM EMPLOYEES
WHERE DEPARTMENT_ID =
  (SELECT DEPARTMENT_ID
  FROM DEPARTMENTS
  WHERE DEPARTMENT_NAME = 'Finance'
  )
AND HIRE_DATE > TO_DATE('29/01/1987', 'dd/MM/yyyy')
UNION ALL
SELECT NULL AS MIN_SALARY_OF_FINANCE, NULL AS NUMBER_OF_EMP_IN_FINANCE, ROUND(AVG(SALARY),2) AS "AVERAGE_SALARY_OF_HR", COUNT(*) AS "NUMBER_OF_EMP_IN_HR"
FROM EMPLOYEES
WHERE DEPARTMENT_ID =
  (SELECT DEPARTMENT_ID
  FROM DEPARTMENTS
  WHERE DEPARTMENT_NAME = 'Human Resources'
  )
  ) T;




SELECT MAX(TOTAL_NUMBER_OF_EMPLOYEES) AS TOTAL_NUMBER_OF_EMPLOYEES,
MAX

SELECT DEPARTMENT_ID, DEPARTMENT_NAME
FROM DEPARTMENTS 
WHERE DEPARTMENT_ID IN (SELECT 
                        DEPARTMENT_ID 
                        FROM EMPLOYEES);

SELECT DISTINCT DEPARTMENTS.DEPARTMENT_ID, DEPARTMENTS.DEPARTMENT_NAME
FROM EMPLOYEES JOIN DEPARTMENTS 
ON EMPLOYEES.DEPARTMENT_ID = DEPARTMENTS.DEPARTMENT_ID;



-- Find employee details who belongs to marketing department and has salary less then or equal to 6000.
SELECT *
FROM DEPARTMENTS
WHERE DEPARTMENT_NAME = 'Marketing';

SELECT * FROM EMPLOYEES WHERE DEPARTMENT_ID = 20 AND SALARY <= 6000;



SELECT * FROM EMPLOYEES WHERE DEPARTMENT_ID IN (SELECT DEPARTMENT_ID
                                               FROM DEPARTMENTS
                                               WHERE DEPARTMENT_NAME = 'Marketing') 
AND JOB_ID = (SELECT JOB_ID 
              FROM JOBS 
              WHERE  JOB_TITLE = 'Marketing Representative')                                              
AND SALARY <= 6000;

--List down only those employee along with department name and city where city is 'Roma' or 'Venice' or 'Southlake'

Marketing Representative
FROM EMPLOYEES
JOIN DEPARTMENTS
ON EMPLOYEES.DEPARTMENT_ID = DEPARTMENTS.DEPARTMENT_ID
JOIN LOCATIONS
ON DEPARTMENTS.LOCATION_ID = LOCATIONS.LOCATION_ID
AND CITY IN ('Roma','Venice','Southlake')
ORDER BY EMPLOYEES.EMPLOYEE_ID;

--List down all the employees along with department name and city where city is 'Roma' or 'Venice' or 'Southlake'

SELECT EMPLOYEES.EMPLOYEE_ID,
       EMPLOYEES.FIRST_NAME,
       DEPARTMENTS.DEPARTMENT_NAME,
       LOCATIONS.CITY
FROM EMPLOYEES 
LEFT JOIN DEPARTMENTS
ON EMPLOYEES.DEPARTMENT_ID = DEPARTMENTS.DEPARTMENT_ID 
LEFT JOIN LOCATIONS
ON DEPARTMENTS.LOCATION_ID = LOCATIONS.LOCATION_ID
AND CITY IN ('Roma','Venice','Southlake')
ORDER BY EMPLOYEES.EMPLOYEE_ID;

--List down all the employees along with department name city where city is 'Roma' or 'Venice' or 'Southlake'
--NOTE: department and city both details should populate only if city belongs to 'Roma' or 'Venice' or 'Southlake'



SELECT DEPARTMENTS.DEPARTMENT_NAME, LOCATIONS.CITY 
FROM DEPARTMENTS JOIN LOCATIONS 
ON DEPARTMENTS.LOCATION_ID = LOCATIONS.LOCATION_ID
AND CITY IN ('Roma','Venice','Southlake');


SELECT EMPLOYEES.EMPLOYEE_ID,
       EMPLOYEES.FIRST_NAME,
       DEPARTMENTS.DEPARTMENT_NAME,
       LOCATIONS.CITY
FROM EMPLOYEES LEFT JOIN 
(SELECT DEPARTMENTS.DEPARTMENT_NAME, LOCATIONS.CITY
FROM DEPARTMENTS JOIN LOCATIONS
ON DEPARTMENTS.LOCATION_ID = LOCATIONS.LOCATION_ID
AND CITY IN ('Roma', 'Venice', 'Southlake')
) DEPT_CITY
ON EMPLOYEES.DEPARTMENT_ID = DEPT_CITY.DEPARTMENT_ID;


SELECT DEPARTMENTS.DEPARTMENT_NAME, MAX(SALARY)
FROM EMPLOYEES JOIN DEPARTMENTS 
ON EMPLOYEES.DEPARTMENT_ID = DEPARTMENTS.DEPARTMENT_ID
WHERE DEPARTMENTS.DEPARTMENT_ID IS NOT NULL
GROUP BY DEPARTMENTS.DEPARTMENT_NAME
HAVING MAX(SALARY) > 10000
ORDER BY MAX(SALARY)ASC , DEPARTMENT_NAME DESC;




SELECT DEPARTMENTS.DEPARTMENT_NAME, COUNT(*) AS "NUMBER_OF_EMPLOYEES",
MAX(SALARY) AS "MAX_SALARY",
SUM(SALARY) AS "TOTAL_SALARY"
FROM EMPLOYEES JOIN DEPARTMENTS 
ON EMPLOYEES.DEPARTMENT_ID = DEPARTMENTS.DEPARTMENT_ID
WHERE DEPARTMENTS.DEPARTMENT_ID IS NOT NULL
GROUP BY DEPARTMENTS.DEPARTMENT_NAME;

SELECT LOCATIONS.CITY, COUNT(*) AS "NUMBER_OF_DEPT"
FROM
DEPARTMENTS, LOCATIONS
WHERE LOCATIONS.LOCATION_ID = DEPARTMENTS.LOCATION_ID
GROUP BY LOCATIONS.CITY;


SELECT M.EMPLOYEE_ID, M.FIRST_NAME ||' '|| M.LAST_NAME AS "MANAGER_NAME", COUNT(*) AS "NUMBER_OF_EMP_WORKING_UNDER_MANAGER"
FROM EMPLOYEES E JOIN EMPLOYEES M
ON E.MANAGER_ID = M.EMPLOYEE_ID
GROUP BY M.EMPLOYEE_ID, M.FIRST_NAME ||' '||  M.LAST_NAME;


SELECT DEPARTMENTS.DEPARTMENT_NAME, COUNT(*) AS "NUMBER_OF_EMPLOYEES_RESIGNED"
FROM JOB_HISTORY JOIN DEPARTMENTS
ON JOB_HISTORY.DEPARTMENT_ID = DEPARTMENTS.DEPARTMENT_ID
GROUP BY JOB_HISTORY.DEPARTMENT_ID, DEPARTMENTS.DEPARTMENT_NAME
HAVING COUNT(*) > 1
ORDER BY NUMBER_OF_EMPLOYEES_RESIGNED DESC;

SELECT DEPARTMENT_ID, COUNT(*) AS NUMBER_OF_EMP_DESIGNED
FROM JOB_HISTORY
GROUP BY DEPARTMENT_ID;

/************************** 7. Show department level details using aggregate function and inline view **************************/ 
SELECT DEPARTMENTS.DEPARTMENT_ID,
DEPARTMENT_NAME, EMPLOYEES.FIRST_NAME || ' ' || EMPLOYEES.LAST_NAME AS MANAGER_NAME,
LOCATIONS.CITY,
 MAX_SALARY, MIN_SALARY, AVG_SALARY, SUM_SALARY, NUMBER_OF_EMP,
 NUMBER_OF_EMP_RESIGNED
FROM DEPARTMENTS LEFT JOIN EMPLOYEES
ON DEPARTMENTS.MANAGER_ID = EMPLOYEES.EMPLOYEE_ID
LEFT JOIN LOCATIONS
ON DEPARTMENTS.LOCATION_ID = LOCATIONS.LOCATION_ID
LEFT JOIN (SELECT
    department_id,
    MAX(salary) AS max_salary,
    MIN(salary) AS min_salary,
    round(AVG(salary),
          2)    AS avg_salary,
    SUM(salary) AS sum_salary,
    COUNT(*)    AS number_of_emp
FROM
    employees
GROUP BY
    department_id)DEPT_SAL_DET
    ON DEPARTMENTS.DEPARTMENT_ID = DEPT_SAL_DET.DEPARTMENT_ID
LEFT JOIN (SELECT DEPARTMENT_ID, COUNT(*) AS NUMBER_OF_EMP_RESIGNED
FROM JOB_HISTORY
GROUP BY DEPARTMENT_ID) EMP_RESIGNATION_DET
ON DEPARTMENTS.DEPARTMENT_ID = EMP_RESIGNATION_DET.DEPARTMENT_ID
ORDER BY DEPARTMENTS.DEPARTMENT_ID;
/************************** 8. Data analysis using Sub-query and EXISTS clause **************************/
SELECT * 
FROM DEPARTMENTS
WHERE EXISTS (SELECT 1 FROM EMPLOYEES WHERE EMPLOYEES.DEPARTMENT_ID = DEPARTMENTS.DEPARTMENT_ID);


SELECT * 
FROM EMPLOYEES 
WHERE EXISTS (SELECT EMPLOYEES.JOB_ID FROM JOB_HISTORY WHERE JOB_HISTORY.EMPLOYEE_ID = EMPLOYEES.EMPLOYEE_ID);

--Results of Exist and IN are same just the internal execution it different.

SELECT * 
FROM EMPLOYEES
WHERE EXISTS (SELECT 1 FROM DEPARTMENTS WHERE DEPARTMENTS.DEPARTMENT_ID = EMPLOYEES.DEPARTMENT_ID);


SELECT * 
FROM EMPLOYEES
WHERE EMPLOYEES.DEPARTMENT_ID IN (SELECT DEPARTMENTS.DEPARTMENT_ID FROM DEPARTMENTS);

--Difference between NOT EXITS and NOT IN 
/*The EXITS clause is much faster than IN when the subquery results is very large. 
Conversely, the IN clause is faster than EXISTS when the subquery is very small.

Also the IN clause can't compare anything with NULL but the EXISTS clause can compare everything with NULL.

*/
SELECT * 
FROM EMPLOYEES 
WHERE NOT EXISTS (SELECT 1 FROM DEPARTMENTS WHERE DEPARTMENTS.DEPARTMENT_ID = EMPLOYEES.DEPARTMENT_ID);


SELECT * 
FROM EMPLOYEES 
WHERE EMPLOYEES.DEPARTMENT_ID  NOT IN (SELECT DEPARTMENTS.DEPARTMENT_ID FROM DEPARTMENTS);


