SELECT * FROM LOCATIONS;
SELECT * FROM DEPARTMENTS; 
SELECT * FROM JOBS; 
SELECT * FROM EMPLOYEES;
SELECT * FROM JOB_HISTORY;
SELECT * FROM REGIONS; 
SELECT * FROM COUNTRIES;


SELECT distinct DEPARTMENT_ID FROM EMPLOYEES
ORDER BY DEPARTMENT_ID DESC;

SELECT * FROM DEPARTMENTS WHERE DEPARTMENT_ID  IN  (
SELECT DISTINCT DEPARTMENT_ID FROM EMPLOYEES);
/************************************* Innner Join: display emplyee details. **************************************/


SELECT e.DEPARTMENT_ID as department_id_from_emp, d.DEPARTMENT_ID as department_id_from_dept 
FROM EMPLOYEES e , DEPARTMENTS d
WHERE e.DEPARTMENT_ID = d.DEPARTMENT_ID
AND d.DEPARTMENT_NAME = 'Marketing';


SELECT EMPLOYEES.EMPLOYEE_ID,
EMPLOYEES.FIRST_NAME || ' ' ||EMPLOYEES.LAST_NAME NAME, 
EMPLOYEES.EMAIL,
LOCATIONS.CITY
FROM EMPLOYEES, DEPARTMENTS, LOCATIONS
WHERE EMPLOYEES.DEPARTMENT_ID = DEPARTMENTS.DEPARTMENT_ID
AND DEPARTMENTS.LOCATION_ID = LOCATIONS.LOCATION_ID
AND DEPARTMENTS.DEPARTMENT_NAME = 'Marketing';

--ANSI Join

SELECT EMPLOYEES.EMPLOYEE_ID,
EMPLOYEES.FIRST_NAME || ' ' ||EMPLOYEES.LAST_NAME NAME,
EMPLOYEES.EMAIL,
LOCATIONS.CITY
FROM EMPLOYEES INNER JOIN DEPARTMENTS
ON EMPLOYEES.DEPARTMENT_ID = DEPARTMENTS.DEPARTMENT_ID
AND DEPARTMENTS.DEPARTMENT_NAME = 'Marketing'
INNER JOIN LOCATIONS
ON DEPARTMENTS.LOCATION_ID = LOCATIONS.LOCATION_ID;

CREATE TABLE TABLE_1 
( 
COLUMN_1 INT 
);

INSERT INTO TABLE_1 (COLUMN_1)
VALUES (1);

INSERT INTO TABLE_1 (COLUMN_1)
VALUES (3);

INSERT INTO TABLE_1 (COLUMN_1)
VALUES (4);

INSERT INTO TABLE_1 (COLUMN_1)
VALUES (9);

DROP TABLE TABLE_2;
CREATE TABLE TABLE_2 
( 
COLUMN_2 INT 
);


INSERT INTO TABLE_2 (COLUMN_2)
VALUES (3);

INSERT INTO TABLE_2 (COLUMN_2)
VALUES (0);

INSERT INTO TABLE_2(COLUMN_2)
VALUES (9);

INSERT INTO TABLE_2 (COLUMN_2)
VALUES (1);

INSERT INTO TABLE_2 (COLUMN_2)
VALUES (78);

INSERT INTO TABLE_2 (COLUMN_2)
VALUES (45);

INSERT INTO TABLE_2(COLUMN_2)
VALUES (85);

INSERT INTO TABLE_2 (COLUMN_2)
VALUES (65);

SELECT * FROM TABLE_1;
SELECT * FROM TABLE_2;

SELECT * 
FROM TABLE_1, TABLE_2
WHERE COLUMN_1 = COLUMN_2;

--Incorrect query

SELECT d.DEPARTMENT_ID,
d.DEPARTMENT_NAME,
e.EMPLOYEE_ID,
e.FIRST_NAME || ' ' || e.LAST_NAME NAME, 
e.EMAIL
FROM DEPARTMENTS d, EMPLOYEES e
WHERE d.DEPARTMENT_ID = e.DEPARTMENT_ID
ORDER BY d.DEPARTMENT_ID;

--List down all the departments along with employees workuung under it 

SELECT d.DEPARTMENT_ID,
d.DEPARTMENT_NAME,
e.EMPLOYEE_ID,
e.FIRST_NAME || ' ' || e.LAST_NAME NAME, 
e.EMAIL
FROM DEPARTMENTS d, EMPLOYEES e
WHERE d.DEPARTMENT_ID = e.DEPARTMENT_ID (+)
ORDER BY d.DEPARTMENT_ID;

--AINSI JOIN

SELECT d.DEPARTMENT_ID,
d.DEPARTMENT_NAME,
e.EMPLOYEE_ID,
e.FIRST_NAME ||' ' || e.LAST_NAME NAME,
e.EMAIL
FROM DEPARTMENTS d LEFT OUTER JOIN EMPLOYEES e 
ON d.DEPARTMENT_ID = e.DEPARTMENT_ID
ORDER BY d.DEPARTMENT_ID;

/********************************************RIGHT OUTER JOIN! List down all the employee along with departments details. ***********************/

SELECT
e.EMPLOYEE_ID, 
e.FIRST_NAME || ' ' || e.LAST_NAME NAME,
e.EMAIL, 
d.DEPARTMENT_ID,
d.DEPARTMENT_NAME
FROM DEPARTMENTS d, EMPLOYEES e
WHERE d.DEPARTMENT_ID = e.DEPARTMENT_ID
ORDER BY d.DEPARTMENT_ID;

--ANSI JOIN 

SELECT 
e.EMPLOYEE_ID,
e.FIRST_NAME || ' ' || e.LAST_NAME NAME, 
e.EMAIL,
d.DEPARTMENT_ID, 
d.DEPARTMENT_NAME
FROM DEPARTMENTS d RIGHT JOIN EMPLOYEES e
ON d.DEPARTMENT_ID = e.DEPARTMENT_ID
AND e.EMPLOYEE_ID > 150
ORDER BY d.DEPARTMENT_ID;

SELECT * FROM TABLE_1;
SELECT * FROM TABLE_2;

--Left Outer Join 

SELECT * 
FROM TABLE_1 LEFT JOIN TABLE_2
ON COLUMN_1 = COLUMN_2
ORDER BY 1;


--Right Outer Join 
SELECT * 
FROM TABLE_1 RIGHT JOIN TABLE_2
ON COLUMN_1 = COLUMN_2
ORDER BY 1;

/*********************** FULL OUTER JOIN and SELF JOIN *********************/ 

--FULL OUTER JOIN: Display all the employee and department records alongwith missing data. 
--ANSI JOIN 
 
 
SELECT d.DEPARTMENT_ID,
d.DEPARTMENT_NAME,
e.EMPLOYEE_ID,
e.FIRST_NAME || ' ' || e.LAST_NAME NAME, 
e.EMAIL
FROM DEPARTMENTS d FULL OUTER JOIN EMPLOYEES e
ON  d.DEPARTMENT_ID = e.DEPARTMENT_ID 
ORDER BY d.DEPARTMENT_ID;

-- SELF JOIN: display employee details along with manager details 

SELECT 
e.EMPLOYEE_ID,
e.FIRST_NAME || ' ' || e.LAST_NAME NAME,
e.EMAIL, 
m.EMPLOYEE_ID as MGR_EMPLOYEE_ID,
m.FIRST_NAME || ' ' ||m.LAST_NAME MGR_NAME
FROM EMPLOYEES e, EMPLOYEES m
WHERE e.MANAGER_ID = m.EMPLOYEE_ID 
ORDER BY e.EMPLOYEE_ID;



SELECT 
d.DEPARTMENT_ID,
d.DEPARTMENT_NAME,
e.EMPLOYEE_ID,
e.FIRST_NAME || ' ' || e.LAST_NAME NAME,
e.EMAIL
FROM DEPARTMENTS d FULL OUTER JOIN EMPLOYEES e
ON d.DEPARTMENT_ID = e.DEPARTMENT_ID 
ORDER BY d.DEPARTMENT_ID;

--Full Outer Join

SELECT * 
FROM TABLE_1 FULL OUTER JOIN TABLE_2
ON COLUMN_1 = COLUMN_2
ORDER BY 1;

--SELF JOIN: Display employee details along with manager details 

SELECT 
e.EMPLOYEE_ID,
e.FIRST_NAME || ' ' || e.LAST_NAME NAME, 
d.DEPARTMENT_NAME,
e.EMAIL,
l.CITY AS DEPARTMENT_LOCATION,
j.JOB_TITLE,
m.FIRST_NAME ||' ' || m.LAST_NAME MANAGER_NAME,
c.COUNTRY_NAME
FROM EMPLOYEES e LEFT JOIN DEPARTMENTS d  
ON e.DEPARTMENT_ID = d.DEPARTMENT_ID
LEFT JOIN JOBS j
ON e.JOB_ID = j.JOB_ID
LEFT JOIN EMPLOYEES m
ON e.MANAGER_ID = m.EMPLOYEE_ID
LEFT JOIN LOCATIONS l
ON d.LOCATION_ID = l.LOCATION_ID
JOIN COUNTRIES c
ON l.COUNTRY_ID = c.COUNTRY_ID;




/*************************************** UNION and UNION ALL **********************/

/*
UNION ALL command is equal to UNION command, except that UNION ALL selects all the values. 
The difference between Union and Union all is that Union all will not eliminate duplicate rows,
instead it just pulls all the rows from all the tables fitting your query specifics and combines them into a table. 


*/ 


